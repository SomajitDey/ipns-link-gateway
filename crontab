#!/usr/bin/env bash
# Brief: Automates update and (re)start of ipns-link-gateway.
#  This script may be executed as cron job on every reboot.
#  Crontab: crontab -e
#    SHELL=/path/to/bash 
#    @reboot sudo path/to/this/script
#    1 1 * * * sudo path/to/this/script
# Note: Root priviledge is required to make caddy bind to lower ports 80 and 443

export PASSWORD= # Put your chosen password here
export DOMAIN= # Put your Gateway's domain name here
export GW_REPO= # Put path to your git-cloned IPNS-Link-Gateway repository here

log(){
  # Brief: Log at ./cron.log
  date "+%D %H:%M:%S: ${1}"
} >> cron.log 2>/dev/null; export -f log
: > cron.log

((EUID == 0)) || { log "Not running as root. Exiting"; exit 1;}

cd "${GW_REPO}" || { log "Failed to cd into repo. Exiting"; exit 1;} # Enter the ipns-link-gateway repository

export socket="${PWD}"/socket # Absolute path to Unix socket that gateway would listen at

# Kill previous instance
kill "$(awk '/^PID:/ {print $2}' '?admin_pass='*)" && rm -f "${socket}"
log "Killed running gateway"
caddy stop
log "Killed running caddy"

./ipns-link-gateway -U # Update

# Launch gateway
if ./ipns-link-gateway -r 0 -u "${socket}" -a "${PASSWORD:-admin}" https://"${DOMAIN}" &>> cron.log; then
  log "Launched Gateway"
else
  log "Failed to launch Gateway. Exiting"
  exit 1
fi

# Launch Caddy
export GW_ADDRS="unix/${socket}"
if caddy start &> caddy.log; then
  log "Launched Caddy"
else
  kill "$(awk '/^PID:/ {print $2}' '?admin_pass='*)" # Kill running Gateway
  log "Failed to launch Caddy. Exiting"
  exit 1
fi
